1.v-bind 是单向数据绑定，简写 ”:“,v-model是双向数据绑定

v-if ,v-show

v-if=""
如果为true，相当于appendChild
false：相当于removeChild

v-show:
true:oDiv.style.display = "block
false:oDiv.style.display = "none"

v-on:原生js的事件名=”逻辑“
v-on:原生js事件名=“方法名”，该方法必须在methods
简写：@

v-bind:xxx=''
v-bind：标签中原生属性
v-bind:自定义属性

v-model 只能应用在表单控件 ui控件中

2.webpack安装在开发环境下:cnpm i webpack@3 --save-dev

3.webpack:
//1.执行webpack时识别webpack.config.js
//2.使用其他文件名，更改脚本
scripts:{
    "dev":"webpack --config ./webpack.dev.config.js"
}
//3.css-loader:
cnpm i css-loader style-loader -D
//4.处理图片的loader
cnpm i url-loader file-loader -D
//处理图片时，设置合理的limit很有必要
limit小于图片大小时，显示的是url 
//5.less-loader:
cnpm i less-loader less -D
//6.配置dist
在config.js中，具体见 05less-loader/webpack.dev.config.jss
//7.html-webpack-plugin:
cnpm i html-webpack-plugin@2 -D
参照物里的index.html自动打包到dist里，并且在html中不用导入build.js
//8.webpack-dev-server:
webpack-dev-server:
--open 自动打开浏览器
--hot 热更新，不在刷新的情况下替换css样式
--inline 自动刷新
--port 9999 指定端口
--process 显示编译进度
//在package.json文件中配置：
"scripts":{
    "dev":"webpack-dev-server --open --hot --inline --config ./webpack.dev.config.js",
    "pro":"webpack --config ./webpack.pro.config.js"
}
//npm run dev 
//9es6解析
cnpm i babel-core babel-loader@7 panel-preset-env babel-plugin-transform-runtime -D
//在webpack-dev-config.js文件中配置：
loader:{
    //处理es6，7，8
    test:/\.js$/,
    loader:"babel-loader",
    options:{
        presets:["env"],
        plugins:["transform-runtime"]
    }
}
//10解析.vue的loader：
cnpm i vue-loader@14 vue-template-compiler@2 -D
//配置vue文件：
{
    test:/\.vue$/,
    loader:"vue-loader"
}
//main.js:
new Vue({
    el:"#app",
    render:c=>c(App)
})


4.$emit $on 必须绑定一个公共的是实例，才能够触发。
新建
//公有vue实例
var Event = new Vue();

5.vue-cli,需要安装全局
cnpm i -g vue-cli

//拉取vue-cli 2,全局安装桥接工具
cnpm i -g @vue/cli-init
//vue-cli@2:

//vue init 模版名 项目名
//vue init webpack my-project


//vue-cli 支持的模块有：
webpack,webpack-simple,browserify,browserify-simple,pwa,simple

6.vue-cli相关文件介绍：
//build文件夹：里面对webpack开发和打包的相关配置，包括入口文件，输出文件，使用的模块

//config文件夹：指定开发和打包的静态资源，要压缩的文件类型，开发使用的端口号，开发使用虚拟服务器跨域请求api

//.editorconfig:代码规范文件，规定使用空格/tab缩进，缩进长度是两位四位的代码风格

//src
//main.js:整个项目的入口文件
//App.vue:入口组件
//router:路由模块
//components:公有组件
//assets:放置每个组件的静态资源|（static放置的是公有静态资源）

//router/index.js:
//此时的router是局部对象，必须使用Vue.use(Router),就可以在任意的组件中使用this.$router,this.$route

//设置顺序
//1新建是有组件文件夹
//1.1创建只有组件
//2router/index.js下配置路由
//3App.vue入口组件中配置

//config/index.js:整个文件的配置入口

//build/webpack.base.conf.js
//处理后缀名：
//resolve:{
    extensions:[
        ".js",".vue",".json"//以这几个后缀名可以省略不写
    ],
    alias:{//以一个别名代表一个路径
        "vue$":"vue/dist/vue.esm.js",
        "@":resolve("src")
    }
}


